//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoarJobUI.WcfNoarJob {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WUser", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NoarJobUI.WcfNoarJob.WCv ChosenCvForJobField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NoarJobUI.WcfNoarJob.WCv[] LstCvsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NoarJobUI.WcfNoarJob.WCv ChosenCvForJob {
            get {
                return this.ChosenCvForJobField;
            }
            set {
                if ((object.ReferenceEquals(this.ChosenCvForJobField, value) != true)) {
                    this.ChosenCvForJobField = value;
                    this.RaisePropertyChanged("ChosenCvForJob");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NoarJobUI.WcfNoarJob.WCv[] LstCvs {
            get {
                return this.LstCvsField;
            }
            set {
                if ((object.ReferenceEquals(this.LstCvsField, value) != true)) {
                    this.LstCvsField = value;
                    this.RaisePropertyChanged("LstCvs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCv", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WCv : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CvFilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CvIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CvIsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CvFilePath {
            get {
                return this.CvFilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.CvFilePathField, value) != true)) {
                    this.CvFilePathField = value;
                    this.RaisePropertyChanged("CvFilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CvID {
            get {
                return this.CvIDField;
            }
            set {
                if ((this.CvIDField.Equals(value) != true)) {
                    this.CvIDField = value;
                    this.RaisePropertyChanged("CvID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CvIsActive {
            get {
                return this.CvIsActiveField;
            }
            set {
                if ((this.CvIsActiveField.Equals(value) != true)) {
                    this.CvIsActiveField = value;
                    this.RaisePropertyChanged("CvIsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WCompanyType", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WCompanyType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyTypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyTypeID {
            get {
                return this.CompanyTypeIDField;
            }
            set {
                if ((this.CompanyTypeIDField.Equals(value) != true)) {
                    this.CompanyTypeIDField = value;
                    this.RaisePropertyChanged("CompanyTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyTypeName {
            get {
                return this.CompanyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyTypeNameField, value) != true)) {
                    this.CompanyTypeNameField = value;
                    this.RaisePropertyChanged("CompanyTypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WEmployer", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WEmployer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployerPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfEmployeesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyEmail {
            get {
                return this.CompanyEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyEmailField, value) != true)) {
                    this.CompanyEmailField = value;
                    this.RaisePropertyChanged("CompanyEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyTypeName {
            get {
                return this.CompanyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyTypeNameField, value) != true)) {
                    this.CompanyTypeNameField = value;
                    this.RaisePropertyChanged("CompanyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployerID {
            get {
                return this.EmployerIDField;
            }
            set {
                if ((this.EmployerIDField.Equals(value) != true)) {
                    this.EmployerIDField = value;
                    this.RaisePropertyChanged("EmployerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployerName {
            get {
                return this.EmployerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployerNameField, value) != true)) {
                    this.EmployerNameField = value;
                    this.RaisePropertyChanged("EmployerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployerPassword {
            get {
                return this.EmployerPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployerPasswordField, value) != true)) {
                    this.EmployerPasswordField = value;
                    this.RaisePropertyChanged("EmployerPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfEmployees {
            get {
                return this.NumOfEmployeesField;
            }
            set {
                if ((this.NumOfEmployeesField.Equals(value) != true)) {
                    this.NumOfEmployeesField = value;
                    this.RaisePropertyChanged("NumOfEmployees");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WJob", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WJob : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CategoriesDictionaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CitiesDictionaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JobIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfEmployeesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> TypesDictionaryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> CategoriesDictionary {
            get {
                return this.CategoriesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesDictionaryField, value) != true)) {
                    this.CategoriesDictionaryField = value;
                    this.RaisePropertyChanged("CategoriesDictionary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> CitiesDictionary {
            get {
                return this.CitiesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.CitiesDictionaryField, value) != true)) {
                    this.CitiesDictionaryField = value;
                    this.RaisePropertyChanged("CitiesDictionary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyTypeName {
            get {
                return this.CompanyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyTypeNameField, value) != true)) {
                    this.CompanyTypeNameField = value;
                    this.RaisePropertyChanged("CompanyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployerName {
            get {
                return this.EmployerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployerNameField, value) != true)) {
                    this.EmployerNameField = value;
                    this.RaisePropertyChanged("EmployerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JobID {
            get {
                return this.JobIDField;
            }
            set {
                if ((this.JobIDField.Equals(value) != true)) {
                    this.JobIDField = value;
                    this.RaisePropertyChanged("JobID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfEmployees {
            get {
                return this.NumOfEmployeesField;
            }
            set {
                if ((this.NumOfEmployeesField.Equals(value) != true)) {
                    this.NumOfEmployeesField = value;
                    this.RaisePropertyChanged("NumOfEmployees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Requirements {
            get {
                return this.RequirementsField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementsField, value) != true)) {
                    this.RequirementsField = value;
                    this.RaisePropertyChanged("Requirements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> TypesDictionary {
            get {
                return this.TypesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.TypesDictionaryField, value) != true)) {
                    this.TypesDictionaryField = value;
                    this.RaisePropertyChanged("TypesDictionary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WJobCategories", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WJobCategories : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChosenJobCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ChosenJobCategoryLstField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChosenJobCategory {
            get {
                return this.ChosenJobCategoryField;
            }
            set {
                if ((this.ChosenJobCategoryField.Equals(value) != true)) {
                    this.ChosenJobCategoryField = value;
                    this.RaisePropertyChanged("ChosenJobCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ChosenJobCategoryLst {
            get {
                return this.ChosenJobCategoryLstField;
            }
            set {
                if ((object.ReferenceEquals(this.ChosenJobCategoryLstField, value) != true)) {
                    this.ChosenJobCategoryLstField = value;
                    this.RaisePropertyChanged("ChosenJobCategoryLst");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSameSearchesOfUsers", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WSameSearchesOfUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountSameParentCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountSameParentCategoryAndChildCategoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountSameParentCategoryAndChildCategoriesAndCitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountSameParentCategoryAndChildCategoriesAndCitiesAndTypesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountSameParentCategory {
            get {
                return this.CountSameParentCategoryField;
            }
            set {
                if ((this.CountSameParentCategoryField.Equals(value) != true)) {
                    this.CountSameParentCategoryField = value;
                    this.RaisePropertyChanged("CountSameParentCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountSameParentCategoryAndChildCategories {
            get {
                return this.CountSameParentCategoryAndChildCategoriesField;
            }
            set {
                if ((this.CountSameParentCategoryAndChildCategoriesField.Equals(value) != true)) {
                    this.CountSameParentCategoryAndChildCategoriesField = value;
                    this.RaisePropertyChanged("CountSameParentCategoryAndChildCategories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountSameParentCategoryAndChildCategoriesAndCities {
            get {
                return this.CountSameParentCategoryAndChildCategoriesAndCitiesField;
            }
            set {
                if ((this.CountSameParentCategoryAndChildCategoriesAndCitiesField.Equals(value) != true)) {
                    this.CountSameParentCategoryAndChildCategoriesAndCitiesField = value;
                    this.RaisePropertyChanged("CountSameParentCategoryAndChildCategoriesAndCities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountSameParentCategoryAndChildCategoriesAndCitiesAndTypes {
            get {
                return this.CountSameParentCategoryAndChildCategoriesAndCitiesAndTypesField;
            }
            set {
                if ((this.CountSameParentCategoryAndChildCategoriesAndCitiesAndTypesField.Equals(value) != true)) {
                    this.CountSameParentCategoryAndChildCategoriesAndCitiesAndTypesField = value;
                    this.RaisePropertyChanged("CountSameParentCategoryAndChildCategoriesAndCitiesAndTypes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSearchAgent", Namespace="http://schemas.datacontract.org/2004/07/WcfNoarJob")]
    [System.SerializableAttribute()]
    public partial class WSearchAgent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> ChildCategoriesDictionaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CitiesDictionaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.KeyValuePair<int, string> ParentCategoryKvpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SearchAgentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> TypesDictionaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> ChildCategoriesDictionary {
            get {
                return this.ChildCategoriesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildCategoriesDictionaryField, value) != true)) {
                    this.ChildCategoriesDictionaryField = value;
                    this.RaisePropertyChanged("ChildCategoriesDictionary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> CitiesDictionary {
            get {
                return this.CitiesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.CitiesDictionaryField, value) != true)) {
                    this.CitiesDictionaryField = value;
                    this.RaisePropertyChanged("CitiesDictionary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.KeyValuePair<int, string> ParentCategoryKvp {
            get {
                return this.ParentCategoryKvpField;
            }
            set {
                if ((this.ParentCategoryKvpField.Equals(value) != true)) {
                    this.ParentCategoryKvpField = value;
                    this.RaisePropertyChanged("ParentCategoryKvp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SearchAgentID {
            get {
                return this.SearchAgentIDField;
            }
            set {
                if ((this.SearchAgentIDField.Equals(value) != true)) {
                    this.SearchAgentIDField = value;
                    this.RaisePropertyChanged("SearchAgentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> TypesDictionary {
            get {
                return this.TypesDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.TypesDictionaryField, value) != true)) {
                    this.TypesDictionaryField = value;
                    this.RaisePropertyChanged("TypesDictionary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfNoarJob.IWcfNoarJob")]
    public interface IWcfNoarJob {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUserResponse")]
        NoarJobUI.WcfNoarJob.WUser CreateUser(string email, string userPassword, string firstName, string lastName, string phone, int cityID, string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUserResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser> CreateUserAsync(string email, string userPassword, string firstName, string lastName, string phone, int cityID, string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UserLogin", ReplyAction="http://tempuri.org/IWcfNoarJob/UserLoginResponse")]
        NoarJobUI.WcfNoarJob.WUser UserLogin(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UserLogin", ReplyAction="http://tempuri.org/IWcfNoarJob/UserLoginResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser> UserLoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetCities", ReplyAction="http://tempuri.org/IWcfNoarJob/GetCitiesResponse")]
        System.Collections.Generic.Dictionary<int, string> GetCities(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetCities", ReplyAction="http://tempuri.org/IWcfNoarJob/GetCitiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetCitiesAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllCompanyTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllCompanyTypesResponse")]
        NoarJobUI.WcfNoarJob.WCompanyType[] GetAllCompanyTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllCompanyTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllCompanyTypesResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WCompanyType[]> GetAllCompanyTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/InsertCv", ReplyAction="http://tempuri.org/IWcfNoarJob/InsertCvResponse")]
        void InsertCv(string cvFilePath, int userID, NoarJobUI.WcfNoarJob.WUser wUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/InsertCv", ReplyAction="http://tempuri.org/IWcfNoarJob/InsertCvResponse")]
        System.Threading.Tasks.Task InsertCvAsync(string cvFilePath, int userID, NoarJobUI.WcfNoarJob.WUser wUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateCvActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateCvActivityResponse")]
        NoarJobUI.WcfNoarJob.WCv UpdateCvActivity(NoarJobUI.WcfNoarJob.WCv wCv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateCvActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateCvActivityResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WCv> UpdateCvActivityAsync(NoarJobUI.WcfNoarJob.WCv wCv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/EmployerLogin", ReplyAction="http://tempuri.org/IWcfNoarJob/EmployerLoginResponse")]
        NoarJobUI.WcfNoarJob.WEmployer EmployerLogin(string companyEmail, string employerPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/EmployerLogin", ReplyAction="http://tempuri.org/IWcfNoarJob/EmployerLoginResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WEmployer> EmployerLoginAsync(string companyEmail, string employerPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateEmployer", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateEmployerResponse")]
        NoarJobUI.WcfNoarJob.WEmployer CreateEmployer(string employerName, int numOfEmployees, int companyTypeID, string companyTypeName, string companyName, string employerPassword, string companyEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateEmployer", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateEmployerResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WEmployer> CreateEmployerAsync(string employerName, int numOfEmployees, int companyTypeID, string companyTypeName, string companyName, string employerPassword, string companyEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateJob", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateJobResponse")]
        NoarJobUI.WcfNoarJob.WJob CreateJob(string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateJob", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateJobResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob> CreateJobAsync(string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateJob", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateJobResponse")]
        void UpdateJob(NoarJobUI.WcfNoarJob.WJob wJob, string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateJob", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateJobResponse")]
        System.Threading.Tasks.Task UpdateJobAsync(NoarJobUI.WcfNoarJob.WJob wJob, string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateJobActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateJobActivityResponse")]
        bool UpdateJobActivity(NoarJobUI.WcfNoarJob.WJob wJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateJobActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateJobActivityResponse")]
        System.Threading.Tasks.Task<bool> UpdateJobActivityAsync(NoarJobUI.WcfNoarJob.WJob wJob);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobsSearch", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobsSearchResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetJobsSearch(int parentCategory, int[] jobCategories, int[] jobTypes, int city, string text, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobsSearch", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobsSearchResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetJobsSearchAsync(int parentCategory, int[] jobCategories, int[] jobTypes, int city, string text, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetEmployerJobsByJobActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/GetEmployerJobsByJobActivityResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetEmployerJobsByJobActivity(int employerID, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetEmployerJobsByJobActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/GetEmployerJobsByJobActivityResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetEmployerJobsByJobActivityAsync(int employerID, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetTheMostSoughtJobBL", ReplyAction="http://tempuri.org/IWcfNoarJob/GetTheMostSoughtJobBLResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetTheMostSoughtJobBL(int userID, int[] childCategoriesLst, int[] citiesLst, int[] typesLst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetTheMostSoughtJobBL", ReplyAction="http://tempuri.org/IWcfNoarJob/GetTheMostSoughtJobBLResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetTheMostSoughtJobBLAsync(int userID, int[] childCategoriesLst, int[] citiesLst, int[] typesLst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetParentJobCategories", ReplyAction="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesResponse")]
        System.Collections.Generic.Dictionary<int, string> GetParentJobCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetParentJobCategories", ReplyAction="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetParentJobCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentID", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDResponse")]
        System.Collections.Generic.Dictionary<int, string> GetJobCategoriesByParentID(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentID", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetJobCategoriesByParentIDAsync(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesByText", ReplyAction="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesByTextResponse")]
        System.Collections.Generic.Dictionary<int, string> GetParentJobCategoriesByText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesByText", ReplyAction="http://tempuri.org/IWcfNoarJob/GetParentJobCategoriesByTextResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetParentJobCategoriesByTextAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDAndByText", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDAndByTextResponse")]
        System.Collections.Generic.Dictionary<int, string> GetJobCategoriesByParentIDAndByText(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDAndByText", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobCategoriesByParentIDAndByTextResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetJobCategoriesByParentIDAndByTextAsync(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllJobTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllJobTypesResponse")]
        System.Collections.Generic.Dictionary<int, string> GetAllJobTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllJobTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllJobTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllJobTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllSubTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllSubTypesResponse")]
        System.Collections.Generic.Dictionary<int, string> GetAllSubTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetAllSubTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/GetAllSubTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllSubTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSameParentCategory", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSameParentCategoryResponse")]
        NoarJobUI.WcfNoarJob.WSameSearchesOfUsers GetSameParentCategory(int parentCategory, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSameParentCategory", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSameParentCategoryResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> GetSameParentCategoryAsync(int parentCategory, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSameChildCategories", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSameChildCategoriesResponse")]
        NoarJobUI.WcfNoarJob.WSameSearchesOfUsers GetSameChildCategories(int[] childCategoriesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSameChildCategories", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSameChildCategoriesResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> GetSameChildCategoriesAsync(int[] childCategoriesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCities", ReplyAction="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesResponse")]
        NoarJobUI.WcfNoarJob.WSameSearchesOfUsers SameChildCategoriesAndCities(int[] childCategoriesLst, int[] citiesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCities", ReplyAction="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> SameChildCategoriesAndCitiesAsync(int[] childCategoriesLst, int[] citiesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesAndTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesAndTypesResponse")]
        NoarJobUI.WcfNoarJob.WSameSearchesOfUsers SameChildCategoriesAndCitiesAndTypes(int[] childCategoriesLst, int[] citiesLst, int[] typesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesAndTypes", ReplyAction="http://tempuri.org/IWcfNoarJob/SameChildCategoriesAndCitiesAndTypesResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> SameChildCategoriesAndCitiesAndTypesAsync(int[] childCategoriesLst, int[] citiesLst, int[] typesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/ResetWSearchAgent", ReplyAction="http://tempuri.org/IWcfNoarJob/ResetWSearchAgentResponse")]
        NoarJobUI.WcfNoarJob.WSearchAgent ResetWSearchAgent(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/ResetWSearchAgent", ReplyAction="http://tempuri.org/IWcfNoarJob/ResetWSearchAgentResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSearchAgent> ResetWSearchAgentAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/InsertSearchAgentValues", ReplyAction="http://tempuri.org/IWcfNoarJob/InsertSearchAgentValuesResponse")]
        void InsertSearchAgentValues(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/InsertSearchAgentValues", ReplyAction="http://tempuri.org/IWcfNoarJob/InsertSearchAgentValuesResponse")]
        System.Threading.Tasks.Task InsertSearchAgentValuesAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentValues", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentValuesResponse")]
        void UpdateSearchAgentValues(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentValues", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentValuesResponse")]
        System.Threading.Tasks.Task UpdateSearchAgentValuesAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentActivityResponse")]
        void UpdateSearchAgentActivity(int userID, int searchAgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentActivity", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateSearchAgentActivityResponse")]
        System.Threading.Tasks.Task UpdateSearchAgentActivityAsync(int userID, int searchAgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobsBySearchAgent", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobsBySearchAgentResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetJobsBySearchAgent(int searchAgentID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetJobsBySearchAgent", ReplyAction="http://tempuri.org/IWcfNoarJob/GetJobsBySearchAgentResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetJobsBySearchAgentAsync(int searchAgentID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSearchAgentsByUser", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSearchAgentsByUserResponse")]
        NoarJobUI.WcfNoarJob.WSearchAgent[] GetSearchAgentsByUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetSearchAgentsByUser", ReplyAction="http://tempuri.org/IWcfNoarJob/GetSearchAgentsByUserResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSearchAgent[]> GetSearchAgentsByUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetApplyForJobs", ReplyAction="http://tempuri.org/IWcfNoarJob/GetApplyForJobsResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetApplyForJobs(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetApplyForJobs", ReplyAction="http://tempuri.org/IWcfNoarJob/GetApplyForJobsResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetApplyForJobsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetLovedJobs", ReplyAction="http://tempuri.org/IWcfNoarJob/GetLovedJobsResponse")]
        NoarJobUI.WcfNoarJob.WJob[] GetLovedJobs(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetLovedJobs", ReplyAction="http://tempuri.org/IWcfNoarJob/GetLovedJobsResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetLovedJobsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetUsersByJobAndTabType", ReplyAction="http://tempuri.org/IWcfNoarJob/GetUsersByJobAndTabTypeResponse")]
        NoarJobUI.WcfNoarJob.WUser[] GetUsersByJobAndTabType(int jobID, int tabType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/GetUsersByJobAndTabType", ReplyAction="http://tempuri.org/IWcfNoarJob/GetUsersByJobAndTabTypeResponse")]
        System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser[]> GetUsersByJobAndTabTypeAsync(int jobID, int tabType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateEmployerNotes", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateEmployerNotesResponse")]
        void UpdateEmployerNotes(int jobID, int userID, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateEmployerNotes", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateEmployerNotesResponse")]
        System.Threading.Tasks.Task UpdateEmployerNotesAsync(int jobID, int userID, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateTabType", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateTabTypeResponse")]
        void UpdateTabType(int jobID, int userID, int tabType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateTabType", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateTabTypeResponse")]
        System.Threading.Tasks.Task UpdateTabTypeAsync(int jobID, int userID, int tabType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateUserJobType", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateUserJobTypeResponse")]
        void UpdateUserJobType(int jobID, int userID, int userJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/UpdateUserJobType", ReplyAction="http://tempuri.org/IWcfNoarJob/UpdateUserJobTypeResponse")]
        System.Threading.Tasks.Task UpdateUserJobTypeAsync(int jobID, int userID, int userJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser_Job", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUser_JobResponse")]
        void CreateUser_Job(int jobID, int userID, int cvID, System.DateTime dateApplicated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser_Job", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUser_JobResponse")]
        System.Threading.Tasks.Task CreateUser_JobAsync(int jobID, int userID, int cvID, System.DateTime dateApplicated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser_JobAtDeleteOrLove", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUser_JobAtDeleteOrLoveResponse")]
        void CreateUser_JobAtDeleteOrLove(int jobID, int userID, int userJobType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfNoarJob/CreateUser_JobAtDeleteOrLove", ReplyAction="http://tempuri.org/IWcfNoarJob/CreateUser_JobAtDeleteOrLoveResponse")]
        System.Threading.Tasks.Task CreateUser_JobAtDeleteOrLoveAsync(int jobID, int userID, int userJobType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfNoarJobChannel : NoarJobUI.WcfNoarJob.IWcfNoarJob, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfNoarJobClient : System.ServiceModel.ClientBase<NoarJobUI.WcfNoarJob.IWcfNoarJob>, NoarJobUI.WcfNoarJob.IWcfNoarJob {
        
        public WcfNoarJobClient() {
        }
        
        public WcfNoarJobClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfNoarJobClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfNoarJobClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfNoarJobClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NoarJobUI.WcfNoarJob.WUser CreateUser(string email, string userPassword, string firstName, string lastName, string phone, int cityID, string cityName) {
            return base.Channel.CreateUser(email, userPassword, firstName, lastName, phone, cityID, cityName);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser> CreateUserAsync(string email, string userPassword, string firstName, string lastName, string phone, int cityID, string cityName) {
            return base.Channel.CreateUserAsync(email, userPassword, firstName, lastName, phone, cityID, cityName);
        }
        
        public NoarJobUI.WcfNoarJob.WUser UserLogin(string email, string password) {
            return base.Channel.UserLogin(email, password);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser> UserLoginAsync(string email, string password) {
            return base.Channel.UserLoginAsync(email, password);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetCities(string city) {
            return base.Channel.GetCities(city);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetCitiesAsync(string city) {
            return base.Channel.GetCitiesAsync(city);
        }
        
        public NoarJobUI.WcfNoarJob.WCompanyType[] GetAllCompanyTypes() {
            return base.Channel.GetAllCompanyTypes();
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WCompanyType[]> GetAllCompanyTypesAsync() {
            return base.Channel.GetAllCompanyTypesAsync();
        }
        
        public void InsertCv(string cvFilePath, int userID, NoarJobUI.WcfNoarJob.WUser wUser) {
            base.Channel.InsertCv(cvFilePath, userID, wUser);
        }
        
        public System.Threading.Tasks.Task InsertCvAsync(string cvFilePath, int userID, NoarJobUI.WcfNoarJob.WUser wUser) {
            return base.Channel.InsertCvAsync(cvFilePath, userID, wUser);
        }
        
        public NoarJobUI.WcfNoarJob.WCv UpdateCvActivity(NoarJobUI.WcfNoarJob.WCv wCv) {
            return base.Channel.UpdateCvActivity(wCv);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WCv> UpdateCvActivityAsync(NoarJobUI.WcfNoarJob.WCv wCv) {
            return base.Channel.UpdateCvActivityAsync(wCv);
        }
        
        public NoarJobUI.WcfNoarJob.WEmployer EmployerLogin(string companyEmail, string employerPassword) {
            return base.Channel.EmployerLogin(companyEmail, employerPassword);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WEmployer> EmployerLoginAsync(string companyEmail, string employerPassword) {
            return base.Channel.EmployerLoginAsync(companyEmail, employerPassword);
        }
        
        public NoarJobUI.WcfNoarJob.WEmployer CreateEmployer(string employerName, int numOfEmployees, int companyTypeID, string companyTypeName, string companyName, string employerPassword, string companyEmail) {
            return base.Channel.CreateEmployer(employerName, numOfEmployees, companyTypeID, companyTypeName, companyName, employerPassword, companyEmail);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WEmployer> CreateEmployerAsync(string employerName, int numOfEmployees, int companyTypeID, string companyTypeName, string companyName, string employerPassword, string companyEmail) {
            return base.Channel.CreateEmployerAsync(employerName, numOfEmployees, companyTypeID, companyTypeName, companyName, employerPassword, companyEmail);
        }
        
        public NoarJobUI.WcfNoarJob.WJob CreateJob(string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes) {
            return base.Channel.CreateJob(title, description, requirements, employerID, phone, email, jobCategories, cities, jobTypes);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob> CreateJobAsync(string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes) {
            return base.Channel.CreateJobAsync(title, description, requirements, employerID, phone, email, jobCategories, cities, jobTypes);
        }
        
        public void UpdateJob(NoarJobUI.WcfNoarJob.WJob wJob, string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes) {
            base.Channel.UpdateJob(wJob, title, description, requirements, employerID, phone, email, jobCategories, cities, jobTypes);
        }
        
        public System.Threading.Tasks.Task UpdateJobAsync(NoarJobUI.WcfNoarJob.WJob wJob, string title, string description, string requirements, int employerID, string phone, string email, int[] jobCategories, int[] cities, int[] jobTypes) {
            return base.Channel.UpdateJobAsync(wJob, title, description, requirements, employerID, phone, email, jobCategories, cities, jobTypes);
        }
        
        public bool UpdateJobActivity(NoarJobUI.WcfNoarJob.WJob wJob) {
            return base.Channel.UpdateJobActivity(wJob);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateJobActivityAsync(NoarJobUI.WcfNoarJob.WJob wJob) {
            return base.Channel.UpdateJobActivityAsync(wJob);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetJobsSearch(int parentCategory, int[] jobCategories, int[] jobTypes, int city, string text, int userID) {
            return base.Channel.GetJobsSearch(parentCategory, jobCategories, jobTypes, city, text, userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetJobsSearchAsync(int parentCategory, int[] jobCategories, int[] jobTypes, int city, string text, int userID) {
            return base.Channel.GetJobsSearchAsync(parentCategory, jobCategories, jobTypes, city, text, userID);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetEmployerJobsByJobActivity(int employerID, bool isActive) {
            return base.Channel.GetEmployerJobsByJobActivity(employerID, isActive);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetEmployerJobsByJobActivityAsync(int employerID, bool isActive) {
            return base.Channel.GetEmployerJobsByJobActivityAsync(employerID, isActive);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetTheMostSoughtJobBL(int userID, int[] childCategoriesLst, int[] citiesLst, int[] typesLst) {
            return base.Channel.GetTheMostSoughtJobBL(userID, childCategoriesLst, citiesLst, typesLst);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetTheMostSoughtJobBLAsync(int userID, int[] childCategoriesLst, int[] citiesLst, int[] typesLst) {
            return base.Channel.GetTheMostSoughtJobBLAsync(userID, childCategoriesLst, citiesLst, typesLst);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetParentJobCategories() {
            return base.Channel.GetParentJobCategories();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetParentJobCategoriesAsync() {
            return base.Channel.GetParentJobCategoriesAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetJobCategoriesByParentID(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories) {
            return base.Channel.GetJobCategoriesByParentID(wJobCategories);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetJobCategoriesByParentIDAsync(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories) {
            return base.Channel.GetJobCategoriesByParentIDAsync(wJobCategories);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetParentJobCategoriesByText(string text) {
            return base.Channel.GetParentJobCategoriesByText(text);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetParentJobCategoriesByTextAsync(string text) {
            return base.Channel.GetParentJobCategoriesByTextAsync(text);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetJobCategoriesByParentIDAndByText(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories, string text) {
            return base.Channel.GetJobCategoriesByParentIDAndByText(wJobCategories, text);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetJobCategoriesByParentIDAndByTextAsync(NoarJobUI.WcfNoarJob.WJobCategories wJobCategories, string text) {
            return base.Channel.GetJobCategoriesByParentIDAndByTextAsync(wJobCategories, text);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetAllJobTypes() {
            return base.Channel.GetAllJobTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllJobTypesAsync() {
            return base.Channel.GetAllJobTypesAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetAllSubTypes() {
            return base.Channel.GetAllSubTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetAllSubTypesAsync() {
            return base.Channel.GetAllSubTypesAsync();
        }
        
        public NoarJobUI.WcfNoarJob.WSameSearchesOfUsers GetSameParentCategory(int parentCategory, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.GetSameParentCategory(parentCategory, wSSOU);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> GetSameParentCategoryAsync(int parentCategory, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.GetSameParentCategoryAsync(parentCategory, wSSOU);
        }
        
        public NoarJobUI.WcfNoarJob.WSameSearchesOfUsers GetSameChildCategories(int[] childCategoriesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.GetSameChildCategories(childCategoriesLst, wSSOU);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> GetSameChildCategoriesAsync(int[] childCategoriesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.GetSameChildCategoriesAsync(childCategoriesLst, wSSOU);
        }
        
        public NoarJobUI.WcfNoarJob.WSameSearchesOfUsers SameChildCategoriesAndCities(int[] childCategoriesLst, int[] citiesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.SameChildCategoriesAndCities(childCategoriesLst, citiesLst, wSSOU);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> SameChildCategoriesAndCitiesAsync(int[] childCategoriesLst, int[] citiesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.SameChildCategoriesAndCitiesAsync(childCategoriesLst, citiesLst, wSSOU);
        }
        
        public NoarJobUI.WcfNoarJob.WSameSearchesOfUsers SameChildCategoriesAndCitiesAndTypes(int[] childCategoriesLst, int[] citiesLst, int[] typesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.SameChildCategoriesAndCitiesAndTypes(childCategoriesLst, citiesLst, typesLst, wSSOU);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSameSearchesOfUsers> SameChildCategoriesAndCitiesAndTypesAsync(int[] childCategoriesLst, int[] citiesLst, int[] typesLst, NoarJobUI.WcfNoarJob.WSameSearchesOfUsers wSSOU) {
            return base.Channel.SameChildCategoriesAndCitiesAndTypesAsync(childCategoriesLst, citiesLst, typesLst, wSSOU);
        }
        
        public NoarJobUI.WcfNoarJob.WSearchAgent ResetWSearchAgent(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent, int userID) {
            return base.Channel.ResetWSearchAgent(wSearchAgent, userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSearchAgent> ResetWSearchAgentAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent, int userID) {
            return base.Channel.ResetWSearchAgentAsync(wSearchAgent, userID);
        }
        
        public void InsertSearchAgentValues(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent) {
            base.Channel.InsertSearchAgentValues(wSearchAgent);
        }
        
        public System.Threading.Tasks.Task InsertSearchAgentValuesAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent) {
            return base.Channel.InsertSearchAgentValuesAsync(wSearchAgent);
        }
        
        public void UpdateSearchAgentValues(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent) {
            base.Channel.UpdateSearchAgentValues(wSearchAgent);
        }
        
        public System.Threading.Tasks.Task UpdateSearchAgentValuesAsync(NoarJobUI.WcfNoarJob.WSearchAgent wSearchAgent) {
            return base.Channel.UpdateSearchAgentValuesAsync(wSearchAgent);
        }
        
        public void UpdateSearchAgentActivity(int userID, int searchAgentID) {
            base.Channel.UpdateSearchAgentActivity(userID, searchAgentID);
        }
        
        public System.Threading.Tasks.Task UpdateSearchAgentActivityAsync(int userID, int searchAgentID) {
            return base.Channel.UpdateSearchAgentActivityAsync(userID, searchAgentID);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetJobsBySearchAgent(int searchAgentID, int userID) {
            return base.Channel.GetJobsBySearchAgent(searchAgentID, userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetJobsBySearchAgentAsync(int searchAgentID, int userID) {
            return base.Channel.GetJobsBySearchAgentAsync(searchAgentID, userID);
        }
        
        public NoarJobUI.WcfNoarJob.WSearchAgent[] GetSearchAgentsByUser(int userID) {
            return base.Channel.GetSearchAgentsByUser(userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WSearchAgent[]> GetSearchAgentsByUserAsync(int userID) {
            return base.Channel.GetSearchAgentsByUserAsync(userID);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetApplyForJobs(int userID) {
            return base.Channel.GetApplyForJobs(userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetApplyForJobsAsync(int userID) {
            return base.Channel.GetApplyForJobsAsync(userID);
        }
        
        public NoarJobUI.WcfNoarJob.WJob[] GetLovedJobs(int userID) {
            return base.Channel.GetLovedJobs(userID);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WJob[]> GetLovedJobsAsync(int userID) {
            return base.Channel.GetLovedJobsAsync(userID);
        }
        
        public NoarJobUI.WcfNoarJob.WUser[] GetUsersByJobAndTabType(int jobID, int tabType) {
            return base.Channel.GetUsersByJobAndTabType(jobID, tabType);
        }
        
        public System.Threading.Tasks.Task<NoarJobUI.WcfNoarJob.WUser[]> GetUsersByJobAndTabTypeAsync(int jobID, int tabType) {
            return base.Channel.GetUsersByJobAndTabTypeAsync(jobID, tabType);
        }
        
        public void UpdateEmployerNotes(int jobID, int userID, string notes) {
            base.Channel.UpdateEmployerNotes(jobID, userID, notes);
        }
        
        public System.Threading.Tasks.Task UpdateEmployerNotesAsync(int jobID, int userID, string notes) {
            return base.Channel.UpdateEmployerNotesAsync(jobID, userID, notes);
        }
        
        public void UpdateTabType(int jobID, int userID, int tabType) {
            base.Channel.UpdateTabType(jobID, userID, tabType);
        }
        
        public System.Threading.Tasks.Task UpdateTabTypeAsync(int jobID, int userID, int tabType) {
            return base.Channel.UpdateTabTypeAsync(jobID, userID, tabType);
        }
        
        public void UpdateUserJobType(int jobID, int userID, int userJobType) {
            base.Channel.UpdateUserJobType(jobID, userID, userJobType);
        }
        
        public System.Threading.Tasks.Task UpdateUserJobTypeAsync(int jobID, int userID, int userJobType) {
            return base.Channel.UpdateUserJobTypeAsync(jobID, userID, userJobType);
        }
        
        public void CreateUser_Job(int jobID, int userID, int cvID, System.DateTime dateApplicated) {
            base.Channel.CreateUser_Job(jobID, userID, cvID, dateApplicated);
        }
        
        public System.Threading.Tasks.Task CreateUser_JobAsync(int jobID, int userID, int cvID, System.DateTime dateApplicated) {
            return base.Channel.CreateUser_JobAsync(jobID, userID, cvID, dateApplicated);
        }
        
        public void CreateUser_JobAtDeleteOrLove(int jobID, int userID, int userJobType) {
            base.Channel.CreateUser_JobAtDeleteOrLove(jobID, userID, userJobType);
        }
        
        public System.Threading.Tasks.Task CreateUser_JobAtDeleteOrLoveAsync(int jobID, int userID, int userJobType) {
            return base.Channel.CreateUser_JobAtDeleteOrLoveAsync(jobID, userID, userJobType);
        }
    }
}
